(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{143:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return o})),n.d(r,"metadata",(function(){return s})),n.d(r,"rightToc",(function(){return c})),n.d(r,"default",(function(){return u}));var t=n(2),i=n(6),a=(n(0),n(196)),o={id:"basics-zil-schnorr-signatures",title:"Schnorr Signatures",keywords:["schnorr signatures","zilliqa"],description:"Schnorr Signatures"},s={id:"basics/basics-zil-schnorr-signatures",isDocsHomePage:!1,title:"Schnorr Signatures",description:"Schnorr Signatures",source:"@site/docs/basics/basics-zil-schnorr-signatures.md",permalink:"/docs/basics/basics-zil-schnorr-signatures",editUrl:"https://github.com/Zilliqa/dev-portal/docs/basics/basics-zil-schnorr-signatures.md",sidebar:"BasicsSideBar",previous:{title:"Consensus Mechanism",permalink:"/docs/basics/basics-zil-consensus"},next:{title:"Reward Mechanism",permalink:"/docs/basics/basics-zil-reward"}},c=[],l={rightToc:c};function u(e){var r=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},l,n,{components:r,mdxType:"MDXLayout"}),Object(a.b)("hr",null),Object(a.b)("p",null,"Zilliqa employs Elliptic Curve Based Schnorr Signature Algorithm (EC-Schnorr) as the base signing algorithm. Schnorr allows for multisignatures, is faster than ECDSA, and has a smaller signature size (64 bytes)."),Object(a.b)("p",null,"The Schnorr algorithm was initially based on section 4.2.3 page 24 of version 1.0 of BSI TR-03111 Elliptic Curve Cryptography (ECC). A more complete discussion of the algorithm is also contained in the Zilliqa ",Object(a.b)("a",Object(t.a)({parentName:"p"},{href:"https://docs.zilliqa.com/whitepaper.pdf"}),"whitepaper"),"."),Object(a.b)("p",null,"The Schnorr algorithm is used during the consensus protocol, message signing, and generally anywhere where a signature is needed within the protocol. Zilliqa nodes are also identified by their Schnorr public keys, alongside their IP information."))}u.isMDXComponent=!0},196:function(e,r,n){"use strict";n.d(r,"a",(function(){return p})),n.d(r,"b",(function(){return f}));var t=n(0),i=n.n(t);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),u=function(e){var r=i.a.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=u(e.components);return i.a.createElement(l.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return i.a.createElement(i.a.Fragment,{},r)}},d=i.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=t,f=p["".concat(o,".").concat(d)]||p[d]||b[d]||a;return n?i.a.createElement(f,s(s({ref:r},l),{},{components:n})):i.a.createElement(f,s({ref:r},l))}));function f(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:t,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);